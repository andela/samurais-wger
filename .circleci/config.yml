# Python CircleCI 2.0 configuration file
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.5
      - image: circleci/python:3.4
      - image: circleci/python:2.7

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
    environment:
      - TEST_MOBILE=True  DB=postgresql
      - TEST_MOBILE=True  DB=sqlite
      - TEST_MOBILE=False DB=postgresql
      - TEST_MOBILE=False DB=sqlite

    working_directory: ~/repo

    notifications:
        slack: andela:4Fln2jKzeoQJkyrxKPheRPOC

    cache:
      directories:
        - $HOME/.cache/pip
        - $HOME/.nvm
        - node_modules
        - wger/node_modules

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            
            - pip install -r requirements_devel.txt
            - npm install
            - if [[ "$DB" = "postgresql" ]]; then pip install psycopg2; fi

            # Setup application
            - if [[ "$DB" = "sqlite" ]]; then invoke create_settings; fi
            - if [[ "$DB" = "postgresql" ]]; then invoke create_settings --database-type postgresql; fi

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      - run:
          name: run tests
          command: |

            - if [[ "$DB" = "postgresq" ]]; then psql -c 'DROP DATABASE IF EXISTS test_wger;' -U postgres; fi
            - if [[ "$DB" = "postgresql" ]]; then psql -c 'CREATE DATABASE test_wger;' -U postgres; fi
            # Formatting
            - pep8 wger

            # Javascript linting
            - gulp lint

            # Regular application
            - coverage run --source='.' ./manage.py test


            # Code coverage
            - coverage report

      - store_artifacts:
          path: test-reports
          destination: test-reports
